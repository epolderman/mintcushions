const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const keys = require('../config/keys');
const mongoose = require('mongoose');
const User = mongoose.model('users');


//new instance of google passport strategy
//passport will use our google strategy
//known as strategy 'google' in passport
passport.use(new GoogleStrategy(
  {
  //configuration options
  clientID: keys.googleClientID,
  clientSecret: keys.googleClientSecret,
  callbackURL: '/auth/google/callback',
  proxy: true
  },
  (accessToken, refreshToken, profile, done) => {

    //async action // returns a promise (how we deal with async code)
    User.findOne({googleID: profile.id}).then((existingUser) =>
    {
      if(!existingUser) {
        //came back null (id did not exist)
        //else create new model instance (represent same record)
        new User({googleID: profile.id,
                  email: profile.emails[0].value,
                  firstname: profile.name.givenName,
                  lastname: profile.name.familyName}).save() //save previous instance
                  .then(user => done(null, user)); //(user)get back a more complete second instance (represent same record)
      }
      else {
          //already have a user in DB with id
          done(null, existingUser);
        }
    })

  })
);

//serialize & deserialize ENCODES/DECODES userID into the cookie

//user is what we pulled out of the database after auth
passport.serializeUser((user, done) => {
  //callback for passport paramters(errors, identifying info)
  //userid was generated by mongo in our DB
  done(null, user.id);
});

//get it->turn into mongoose instance
passport.deserializeUser((id, done)=>{
  //query DB by userID and if found return our user mongoose instance
  User.findById(id).then(user => {
    done(null, user);
  })
});
